var documenterSearchIndex = {"docs":
[{"location":"getting-started/#Getting-started-guide-1","page":"Getting started guide","title":"Getting started guide","text":"","category":"section"},{"location":"getting-started/#Installation-1","page":"Getting started guide","title":"Installation","text":"","category":"section"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"HAML.jl is a registered package and can be installed through the usual ]add HAML or using Pkg; Pkg.add(\"HAML\"). It has minimal dependencies.","category":"page"},{"location":"getting-started/#In-line-use-1","page":"Getting started guide","title":"In-line use","text":"","category":"section"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"The easiest way to experiment with HAML are haml\"...\" strings. This is an example of a non-standard string literal and it is implemented through the @haml_str macro. You use it like this:","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"using HAML\n\nprintln(haml\"%p Hello, world!\")","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"HAML uses indentation to mark the opening and closing of tags. This makes it possible to write HTML in a very concise way:","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"link = \"https://youtu.be/dQw4w9WgXcQ\"\n\nhaml\"\"\"\n!!! 5\n%html\n  %body\n    %a(href=link) Hello, world!\n\"\"\" |> print","category":"page"},{"location":"getting-started/#Syntax-overview-1","page":"Getting started guide","title":"Syntax overview","text":"","category":"section"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"Use % for tag name, # for the id attribute, . for the class attribute. Use named tuple syntax for other attributes. If % is omitted, we default to div:","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"haml\"\"\"%a(href=\"/\") Click me\"\"\" |> println\n\nhaml\"\"\"%a.nav(href=\"/\") Click me too\"\"\" |> println\n\nhaml\"\"\"%a#homelink.nav(href=\"/\") Home\"\"\" |> println\n\nhaml\"\"\"#navbar\"\"\" |> println\n\nhaml\"\"\".navitem\"\"\" |> println","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"Use indentation for nesting.\nUse - for evaluating Julia code. Use = for including the result of evaluating Julia code:","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"haml\"%p= 2 + 2\" |> println\n\nhaml\"\"\"\n%ul\n  - for i in 1:2\n    %li= i\n\"\"\" |> println","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"Use $ for interpolation of Julia values into static content:","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"haml\"%p= 2 + 2\" |> println\n\nhaml\"\"\"\n%p\n  Two and two make $(2 + 2)\n  - difficulty = \"easy\"\n  This is $(difficulty)!\n\"\"\" |> println","category":"page"},{"location":"getting-started/#Using-HAML-templates-from-files-1","page":"Getting started guide","title":"Using HAML templates from files","text":"","category":"section"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"Use the includehaml function to include a HAML template from a file and make it a function in a certain module.","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"mktemp() do path, io\n    write(io, raw\"\"\"\n    %p\n       Hello from this file! I am running in\n       %i= @__MODULE__\n       and I received the following parameters:\n    %dl\n      %dt foo\n      %dd= $foo\n      %dt bar\n      %dd= $bar\n    \"\"\")\n    close(io)\n\n    includehaml(Main, :my_first_template, path)\nend\n\nMain.my_first_template(foo=42, bar=43) |> print","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"Note how the keyword parameters are available through $foo and $bar.","category":"page"},{"location":"getting-started/#","page":"Getting started guide","title":"Getting started guide","text":"There is also a render function which takes a file name and immediately renders the result. However, we recommend using includehaml where possible, at the top-level of your module, because Julia will pre-compile the function in this case.","category":"page"},{"location":"api-reference/#API-reference-1","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api-reference/#Functions-and-macros-1","page":"API reference","title":"Functions and macros","text":"","category":"section"},{"location":"api-reference/#","page":"API reference","title":"API reference","text":"@haml_str\nincludehaml\nrender","category":"page"},{"location":"api-reference/#HAML.Codegen.@haml_str","page":"API reference","title":"HAML.Codegen.@haml_str","text":"@haml_str(source)\nhaml\"...\"\n\nInclude HAML source code into Julia source. The code will be executed in the context (module / function) where it appears and has access to the same variables.\n\nExample\n\njulia> haml\"%p Hello, world\"\n\"<p>Hello, world</p>\"\n\n\n\n\n\n","category":"macro"},{"location":"api-reference/#HAML.Templates.includehaml","page":"API reference","title":"HAML.Templates.includehaml","text":"includehaml(mod::Module, fn::Symbol, path, indent=\"\")\nincludehaml(mod::Module, fns::Pair{Symbol}...)\n\nDefine methods for the function mod.fn that allow rendering the HAML template in the file path. These methods have the following signatures:\n\nfn(io::IO; variables...)\nfn(f::Function; variables...)\nfn(; variables...)\n\nwhere the output of the template will be written to io / passed to f / returned respectively.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#HAML.Templates.render","page":"API reference","title":"HAML.Templates.render","text":"render(io, path; variables=(), indent=\"\")\n\nEvaluate HAML code in the file specified by path and write the result to io. Any variables passed as variables will be available to the resulting code as $key.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/#Types-1","page":"API reference","title":"Types","text":"","category":"section"},{"location":"api-reference/#","page":"API reference","title":"API reference","text":"HAML.Source","category":"page"},{"location":"api-reference/#HAML.Parse.Source","page":"API reference","title":"HAML.Parse.Source","text":"HAML.Source(\"/path/to/file.hamljl\")\nHAML.Source(::LineNumberNode, ::AbstractString)\n\nRepresent Julia-flavoured HAML source code that can be parsed using the Meta.parse function.\n\n\n\n\n\n","category":"type"},{"location":"#HAML.jl-1","page":"HAML.jl","title":"HAML.jl","text":"","category":"section"},{"location":"#","page":"HAML.jl","title":"HAML.jl","text":"HTML Abstract Markup Language for Julia. Inspired by Ruby's HAML.","category":"page"},{"location":"#Getting-started-1","page":"HAML.jl","title":"Getting started","text":"","category":"section"},{"location":"#","page":"HAML.jl","title":"HAML.jl","text":"If you are already familiar with Ruby-flavoured HAML, read about the differences here. If not, the Getting started guide is the best starting point.","category":"page"},{"location":"#Syntax-1","page":"HAML.jl","title":"Syntax","text":"","category":"section"},{"location":"#","page":"HAML.jl","title":"HAML.jl","text":"The Syntax reference describes the language constructions of Julia-flavoured HAML.","category":"page"},{"location":"#Reference-1","page":"HAML.jl","title":"Reference","text":"","category":"section"},{"location":"#","page":"HAML.jl","title":"HAML.jl","text":"The API reference contains documentation on the exported functions and types that allow using HAML in your own application.","category":"page"},{"location":"syntax/#Syntax-reference-1","page":"Syntax reference","title":"Syntax reference","text":"","category":"section"},{"location":"syntax/#","page":"Syntax reference","title":"Syntax reference","text":"Goes here.","category":"page"},{"location":"fromruby/#Differences-from-Ruby-flavoured-HAML-1","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"","category":"section"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"Julia-flavoured HAML is quite close to Ruby-flavoured HAML. Below we describe the differences between the syntax for the latter and the former.","category":"page"},{"location":"fromruby/#Attributes-use-named-tuple-syntax-1","page":"Differences from Ruby-flavoured HAML","title":"Attributes use named tuple syntax","text":"","category":"section"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"In Ruby-flavoured HAML the attributes are specified in a Ruby-like syntax. In the Julia-flavoured version, we use the same syntax as for named tuples. Examples:","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"- link = \"https://youtu.be/dQw4w9WgXcQ\"\n- attr = :href\n%a(href=link) Click me\n%a(attr=>link) Click me","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"Just like in the Ruby-flavoured version, nested attributes are joined by - and underscores in keys are replaced by dashes:","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"%a(href=\"/posts\", data=(author_id=123, category=7)) Posts By Author","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"If you need another special character in the attribute, it with Symbol(...) =>. For example, the attribute xml:lang:","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"%html(xmlns = \"http://www.w3.org/1999/xhtml\", Symbol(\"xml:lang\") => \"en\", lang=\"en\")","category":"page"},{"location":"fromruby/#Helper-methods-are-usually-macros-1","page":"Differences from Ruby-flavoured HAML","title":"Helper methods are usually macros","text":"","category":"section"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"Many of the Ruby-flavoured helper methods are not supported (yet). The ones that are (e.g., @surround) are macros. In particular, note that you should use - and not = as in Ruby:","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"- @surround(\"(\", \")\") do\n  %span Hello","category":"page"},{"location":"fromruby/#Interpolation-expects-Julia-syntax-1","page":"Differences from Ruby-flavoured HAML","title":"Interpolation expects Julia syntax","text":"","category":"section"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"Use $ for interpolation in literal text instead of #{...}. Example:","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"- quality = \"scruptious\"\n%p This is $quality cake!","category":"page"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"note: Note\nIf you need to combine this with keyword parameters to a template file, you'll need double quotes:%p This is $($quality) cake!","category":"page"},{"location":"fromruby/#Helper-macros/methods-may-need-to-be-imported-1","page":"Differences from Ruby-flavoured HAML","title":"Helper macros/methods may need to be imported","text":"","category":"section"},{"location":"fromruby/#","page":"Differences from Ruby-flavoured HAML","title":"Differences from Ruby-flavoured HAML","text":"If you use @haml_str or includehaml the HAML code runs in a module you own. If you want to use macros or helper methods (e.g., @include or @surround then you need to either use using HAML or import them.","category":"page"}]
}
